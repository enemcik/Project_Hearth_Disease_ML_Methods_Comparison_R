lrn$par.vals = list(objective = "binary:logistic", eval_metric = "error")
params = makeParamSet(makeDiscreteParam("booster",
values = c("gbtree","gblinear")),
makeIntegerParam("max_depth", lower = 3L, upper = 10L),
makeIntegerParam("nrounds", lower = 5L, upper = 30L),
makeNumericParam("min_child_weight", lower = 1L, upper = 10L),
makeNumericParam("subsample", lower = 0.5, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeNumericParam("gamma",lower = 0, upper = 2),
makeNumericParam("eta", lower = 0.1, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(max_depth = 10, nrounds = 10, min_child_weight = 50,
#                                          subsample = 50, colsample_bytree = 50, gamma = 50,
#                                          eta = 50), tune.threshold = FALSE)
parallelStartSocket(cpus=detectCores())
set.seed(121)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(11)
xgmodel = train(learner = lrn_tune, task = traintask)
xgpred = predict(xgmodel,testtask)
acc_xgboost = confusionMatrix(xgpred$data$response,xgpred$data$truth)$overall[1]
er_xgboost = mean(xgpred$data$response != xgpred$data$truth)
auc = generateThreshVsPerfData(xgpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_xgboost = mlr::performance(xgpred, mlr::auc)
##NNET
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.nnet",predict.type = "prob")
lrn$par.vals = list(maxit = 100, na.action = na.omit)
params = makeParamSet(
makeIntegerParam("size", lower = 2L, upper = 10L),
makeNumericParam("decay", lower = -3, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
#design = generateGridDesign(params, resolution = c(size = 10, decay = 100))
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(size = 10, decay = 500), tune.threshold = FALSE)
set.seed(49)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
mytune$y
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(95)
nnetmodel = train(learner = lrn_tune, task = traintask)
nnetpred = predict(nnetmodel,testtask)
acc_nn = confusionMatrix(nnetpred$data$response,nnetpred$data$truth)$overall[1]
er_nn = mean(nnetpred$data$response != nnetpred$data$truth)
auc = generateThreshVsPerfData(nnetpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_nn = mlr::performance(nnetpred, mlr::auc)
#######################
####Replicated Paper###
#######################
###LOGISTIC REGRESSION### ##DONE
logit = glm(fmla, data = train_data, family = "binomial")
prob_log = predict(logit, val_data, type = "response")
pred_log = ROCR::prediction(prob_log, val_data$target) #create a prediction object with true values and predicted ones
roc.perf_log = ROCR::performance(pred_log, measure = "tpr", x.measure = "fpr") #performance measure as ROC
plot(roc.perf_log)
auc.perf_log = ROCR::performance(pred_log, measure = "auc") #performance measure AUC
auc_log_old = auc.perf_log@y.values[[1]]
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
print(opt.cut(roc.perf_log, pred_log)) #formula which finds "optimal" cutoff weighting both sensitivity and specificity equally (TPR and FPR)
acc.perf_log = ROCR::performance(pred_log, measure = "acc") # find best cutoff according to accuracy
plot(acc.perf_log)
ind_log = which.max( slot(acc.perf_log, "y.values")[[1]] )
acc_log_old = slot(acc.perf_log, "y.values")[[1]][ind_log]
cutoff_log = slot(acc.perf_log, "x.values")[[1]][ind_log]
print(c(accuracy= acc_log_old, cutoff = cutoff_log))
pred_log = as.numeric(prob_log > cutoff_log) #ERROR- minimized by maximizing ACCURACY using its cutoff
er_log_old = mean(pred_log != val_data$target)
er_log_old
###DECISION TREES### ##DONE
cart = rpart(fmla, data = train_data, method = 'class')
rpart.plot(cart)
prob_cart = predict(cart, val_data) #prediction
pred_cart = ROCR::prediction(prob_cart[,2], val_data$target)
roc.perf_cart = ROCR::performance(pred_cart, measure = "tpr", x.measure = "fpr") #performance measure as ROC
plot(roc.perf_cart)
auc.perf_cart = ROCR::performance(pred_cart, measure = "auc") #performance measure AUC
auc_cart_old = auc.perf_cart@y.values[[1]]
print(opt.cut(roc.perf_cart, pred_cart))
acc.perf_cart = ROCR::performance(pred_cart, measure = "acc") # find best cutoff according to accuracy
plot(acc.perf_cart)
ind_cart = which.max( slot(acc.perf_cart, "y.values")[[1]] )
acc_cart_old = slot(acc.perf_cart, "y.values")[[1]][ind_cart]
cutoff_cart = slot(acc.perf_cart, "x.values")[[1]][ind_cart]
print(c(accuracy= acc_cart_old, cutoff = cutoff_cart))
pred_cart = as.numeric(prob_cart[,2] > cutoff_cart) #ERROR- minimized by maximizing ACCURACY using its cutoff
er_cart_old = mean(pred_cart != val_data$target)
er_cart_old
###NEURAL NETWORKS### ##DONE
set.seed(69)
nn = nnet(target~Ã¯..age+sex+cp+trestbps+chol+fbs+restecg+thalach
+exang+oldpeak+slope+ca+thal, data = train_data, size = 5, decay = 5e-4, maxit = 100)
##code for optimal cutoffs and etc for logit seems to work here
prob_nn = predict(nn, val_data)
pred_nn = ROCR::prediction(prob_nn, val_data$target) #create a prediction object with true values and predicted ones
roc.perf_nn = ROCR::performance(pred_nn, measure = "tpr", x.measure = "fpr") #performance measure as ROC
plot(roc.perf_nn)
auc.perf_nn = ROCR::performance(pred_nn, measure = "auc") #performance measure AUC
auc_nn_old = auc.perf_nn@y.values[[1]]
print(opt.cut(roc.perf_nn, pred_nn)) #formula which finds "optimal" cutoff weighting both sensitivity and specificity equally (TPR and FPR)
acc.perf_nn = ROCR::performance(pred_nn, measure = "acc") # find best cutoff according to accuracy
plot(acc.perf_nn)
ind_nn = which.max( slot(acc.perf_nn, "y.values")[[1]] )
acc_nn_old = slot(acc.perf_nn, "y.values")[[1]][ind_nn]
cutoff_nn = slot(acc.perf_nn, "x.values")[[1]][ind_nn]
print(c(accuracy= acc_nn_old, cutoff = cutoff_nn))
pred_nn = as.numeric(prob_nn > cutoff_nn) #ERROR- minimized by maximizing ACCURACY using its cutoff
er_nn_old = mean(pred_nn != val_data$target)
er_nn_old
################
###STATISTICS###
################
###NEW###
print(mean(acc_log, na.rm = TRUE))
print(acc_cart)
print(acc_nn)
print(acc_xgboost)
print(acc_rf)
print(mean(er_log, na.rm = TRUE))
print(er_cart)
print(er_nn)
print(er_xgboost)
print(er_rf)
print(mean(auc_log, na.rm = TRUE))
print(auc_cart)
print(auc_nn)
print(auc_xgboost)
print(auc_rf)
print(mean(cut_log, na.rm = TRUE))
print(cut_cart)
print(cut_rf)
###OLD###
print(acc_log_old)
print(acc_cart_old)
print(acc_nn_old)
print(er_log_old)
print(er_cart_old)
print(er_nn_old)
print(auc_log_old)
print(auc_cart_old)
print(auc_nn_old)
library(parallel)
library(parallelMap)
#library(party)
#library(DiagrammeR)
library(GGally)
library(neuralnet)
#library(foreign)
library(plyr)
library(MASS)
library(rms)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(e1071)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(cluster)
library(factoextra)
library(xgboost)
library(Matrix)
library(mltools)
library(data.table)
library(DMwR)
library(zoo)
library(caret)
library(randomForest)
library(nnet)
library(ROCR)
library(mlr)
####DATA HANDLING/INSPECTION
data = read.csv("heart.csv")
data = as.data.frame(data)
head(data,5)
data$sex = as.factor(data$sex) #gender
data$cp = as.factor(data$cp) #chest pain
data$fbs = as.factor(data$fbs) #fasting blood sugar
data$restecg = as.factor(data$restecg) #resting ECG
data$exang = as.factor(data$exang) # induced angina
data$slope = as.factor(data$slope) #slope
data$ca = as.factor(data$ca) #number of colored vessels
data$thal = as.factor(data$thal) #thal
data$target = as.factor(data$target) #outcome variable (heart disease or not)
data = data[data$thal!=0,]  #removing and merging very rare levels /not informative
data$thal = factor(data$thal)
#data$ca[data$ca==4] = 3
data$ca = factor(data$ca)
str(data) #variables
summary(data) #variable statistics
sapply(data, sd)
apply(data, 2, function(x) {sum(is.na(x))}) #NAs inspection, 0 present
summary(data)
data_cv = data #cross-validation
summary(data_cv$target)
n = nrow(data) #shuffling the data
set.seed(104)
data = data[sample(n),]
set.seed(46)
rand_rows = sample(1:nrow(data), 0.6*nrow(data)) #split into training and validation dataset
train_data = data[rand_rows, ]
val_data = data[-rand_rows, ]
vars = colnames(data)[-length(colnames(data))] #creating a formula
y = "target"
fmla = paste(y, paste(vars, collapse="+"),sep="~")
fmla
#### creating 2 functions which we will use ###
opt.cut = function(perf, pred){ # function which finds optimal cutoff level maximizing a trade-off between Sensitivity& Specifivity
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
performanceMeasures<-function(prob, truth, name="model") { #Function for various accuracy measures we use.
pred= ROCR::prediction(prob, truth)
roc = ROCR::performance(pred, measure = "tpr", x.measure = "fpr") #performance measure as ROC
auc.perf= ROCR::performance(pred, measure = "auc") #performance measure AUC
auc= auc.perf@y.values[[1]]
sen_spe = opt.cut(roc, pred)
acc.perf = ROCR::performance(pred, measure = "acc") # find best cutoff according to accuracy
ind = which.max( slot(acc.perf, "y.values")[[1]] )
acc = slot(acc.perf, "y.values")[[1]][ind]
cutoff= slot(acc.perf, "x.values")[[1]][ind]
pred_cut = as.numeric(prob > cutoff) #ERROR- minimized by maximizing ACCURACY using its cutoff
er = mean(pred_cut != truth)
data.frame(model=name, Area_under_the_curve = auc, Sensitivity = sen_spe[1],
Specificity= sen_spe[2], Cutoff_Sen_Spe= sen_spe[3], Accuracy=acc, Cutoff_acc = cutoff, error=er)
}
###XGBOOST### ##DONE
sparse_matrix = sparse.model.matrix(target ~ ., data = train_data)[,-1] #dummy contrast coding of categorical variables to fit the xgboost
sparse_matrix_val = sparse.model.matrix(target ~ ., data = val_data[,colnames(train_data)])[,-1]
labels = as.numeric(train_data$target)
ts_label = as.numeric(val_data$target)
fact_col = colnames(train_data)[sapply(train_data,is.character)]
for(i in fact_col) set (train_data, j = i, value = factor(data_train[i]))
for(i in fact_col) set (val_data, j = i, value = factor(data_train[i]))
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.xgboost",predict.type = "prob")
lrn$par.vals = list(objective = "binary:logistic", eval_metric = "error")
params = makeParamSet(makeDiscreteParam("booster",
values = c("gbtree","gblinear")),
makeIntegerParam("max_depth", lower = 3L, upper = 10L),
makeIntegerParam("nrounds", lower = 5L, upper = 30L),
makeNumericParam("min_child_weight", lower = 1L, upper = 10L),
makeNumericParam("subsample", lower = 0.5, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeNumericParam("gamma",lower = 0, upper = 2),
makeNumericParam("eta", lower = 0.1, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
ctrl = makeTuneControlRandom(maxit = 100L)
parallelStartSocket(cpus=detectCores())
set.seed(121)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(11)
xgmodel = train(learner = lrn_tune, task = traintask)
xgpred = predict(xgmodel,testtask)
acc_xgboost = confusionMatrix(xgpred$data$response,xgpred$data$truth)$overall[1]
er_xgboost = mean(xgpred$data$response != xgpred$data$truth)
auc = generateThreshVsPerfData(xgpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_xgboost = mlr::performance(xgpred, mlr::auc)
acc_xgboost
er_xgboost
##NNET
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.nnet",predict.type = "prob")
lrn$par.vals = list(maxit = 100, na.action = na.omit)
params = makeParamSet(
makeIntegerParam("size", lower = 2L, upper = 10L),
makeNumericParam("decay", lower = -3, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
#design = generateGridDesign(params, resolution = c(size = 10, decay = 100))
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(size = 10, decay = 500), tune.threshold = FALSE)
set.seed(49)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
mytune$y
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(95)
nnetmodel = train(learner = lrn_tune, task = traintask)
nnetpred = predict(nnetmodel,testtask)
data = read.csv("heart.csv")
data = as.data.frame(data)
head(data,5)
data$sex = as.factor(data$sex) #gender
data$cp = as.factor(data$cp) #chest pain
data$fbs = as.factor(data$fbs) #fasting blood sugar
data$restecg = as.factor(data$restecg) #resting ECG
data$exang = as.factor(data$exang) # induced angina
data$slope = as.factor(data$slope) #slope
data$ca = as.factor(data$ca) #number of colored vessels
data$thal = as.factor(data$thal) #thal
data$target = as.factor(data$target) #outcome variable (heart disease or not)
data = data[data$thal!=0,]  #removing and merging very rare levels /not informative
data$thal = factor(data$thal)
data$ca[data$ca==4] = 3
data$ca = factor(data$ca)
str(data) #variables
summary(data) #variable statistics
sapply(data, sd)
apply(data, 2, function(x) {sum(is.na(x))}) #NAs inspection, 0 present
summary(data)
data_cv = data #cross-validation
summary(data_cv$target)
n = nrow(data) #shuffling the data
set.seed(104)
data = data[sample(n),]
set.seed(46)
rand_rows = sample(1:nrow(data), 0.6*nrow(data)) #split into training and validation dataset
train_data = data[rand_rows, ]
val_data = data[-rand_rows, ]
vars = colnames(data)[-length(colnames(data))] #creating a formula
y = "target"
fmla = paste(y, paste(vars, collapse="+"),sep="~")
fmla
#### creating 2 functions which we will use ###
opt.cut = function(perf, pred){ # function which finds optimal cutoff level maximizing a trade-off between Sensitivity& Specifivity
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
performanceMeasures<-function(prob, truth, name="model") { #Function for various accuracy measures we use.
pred= ROCR::prediction(prob, truth)
roc = ROCR::performance(pred, measure = "tpr", x.measure = "fpr") #performance measure as ROC
auc.perf= ROCR::performance(pred, measure = "auc") #performance measure AUC
auc= auc.perf@y.values[[1]]
sen_spe = opt.cut(roc, pred)
acc.perf = ROCR::performance(pred, measure = "acc") # find best cutoff according to accuracy
ind = which.max( slot(acc.perf, "y.values")[[1]] )
acc = slot(acc.perf, "y.values")[[1]][ind]
cutoff= slot(acc.perf, "x.values")[[1]][ind]
pred_cut = as.numeric(prob > cutoff) #ERROR- minimized by maximizing ACCURACY using its cutoff
er = mean(pred_cut != truth)
data.frame(model=name, Area_under_the_curve = auc, Sensitivity = sen_spe[1],
Specificity= sen_spe[2], Cutoff_Sen_Spe= sen_spe[3], Accuracy=acc, Cutoff_acc = cutoff, error=er)
}
##NNET
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.nnet",predict.type = "prob")
lrn$par.vals = list(maxit = 100, na.action = na.omit)
params = makeParamSet(
makeIntegerParam("size", lower = 2L, upper = 10L),
makeNumericParam("decay", lower = -3, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
#design = generateGridDesign(params, resolution = c(size = 10, decay = 100))
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(size = 10, decay = 500), tune.threshold = FALSE)
set.seed(49)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
mytune$y
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(95)
nnetmodel = train(learner = lrn_tune, task = traintask)
nnetpred = predict(nnetmodel,testtask)
acc_nn = confusionMatrix(nnetpred$data$response,nnetpred$data$truth)$overall[1]
er_nn = mean(nnetpred$data$response != nnetpred$data$truth)
auc = generateThreshVsPerfData(nnetpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_nn = mlr::performance(nnetpred, mlr::auc)
str(data) #variables
summary(data) #variable statistics
set.seed(45)
data = read.csv("heart.csv")
data = as.data.frame(data)
head(data,5)
data$sex = as.factor(data$sex) #gender
data$cp = as.factor(data$cp) #chest pain
data$fbs = as.factor(data$fbs) #fasting blood sugar
data$restecg = as.factor(data$restecg) #resting ECG
data$exang = as.factor(data$exang) # induced angina
data$slope = as.factor(data$slope) #slope
data$ca = as.factor(data$ca) #number of colored vessels
data$thal = as.factor(data$thal) #thal
data$target = as.factor(data$target) #outcome variable (heart disease or not)
data = data[data$thal!=0,]  #removing and merging very rare levels /not informative
data$thal = factor(data$thal)
data$ca[data$ca==4] = 3
data$ca = factor(data$ca)
str(data) #variables
summary(data) #variable statistics
sapply(data, sd)
apply(data, 2, function(x) {sum(is.na(x))}) #NAs inspection, 0 present
summary(data)
data_cv = data #cross-validation
summary(data_cv$target)
n = nrow(data) #shuffling the data
set.seed(104)
data = data[sample(n),]
set.seed(45)
rand_rows = sample(1:nrow(data), 0.6*nrow(data)) #split into training and validation dataset
train_data = data[rand_rows, ]
val_data = data[-rand_rows, ]
vars = colnames(data)[-length(colnames(data))] #creating a formula
y = "target"
fmla = paste(y, paste(vars, collapse="+"),sep="~")
fmla
str(val_data)
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.nnet",predict.type = "prob")
lrn$par.vals = list(maxit = 100, na.action = na.omit)
params = makeParamSet(
makeIntegerParam("size", lower = 2L, upper = 10L),
makeNumericParam("decay", lower = -3, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
#design = generateGridDesign(params, resolution = c(size = 10, decay = 100))
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(size = 10, decay = 500), tune.threshold = FALSE)
set.seed(49)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
mytune$y
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(95)
nnetmodel = train(learner = lrn_tune, task = traintask)
nnetpred = predict(nnetmodel,testtask)
acc_nn = confusionMatrix(nnetpred$data$response,nnetpred$data$truth)$overall[1]
er_nn = mean(nnetpred$data$response != nnetpred$data$truth)
auc = generateThreshVsPerfData(nnetpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_nn = mlr::performance(nnetpred, mlr::auc)
mytune$y
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
nnetmodel = train(learner = lrn_tune, task = traintask)
nnetpred = predict(nnetmodel,testtask)
acc_nn
er_nn
sparse_matrix = sparse.model.matrix(target ~ ., data = train_data)[,-1] #dummy contrast coding of categorical variables to fit the xgboost
sparse_matrix_val = sparse.model.matrix(target ~ ., data = val_data[,colnames(train_data)])[,-1]
labels = as.numeric(train_data$target)
ts_label = as.numeric(val_data$target)
fact_col = colnames(train_data)[sapply(train_data,is.character)]
for(i in fact_col) set (train_data, j = i, value = factor(data_train[i]))
for(i in fact_col) set (val_data, j = i, value = factor(data_train[i]))
traintask = makeClassifTask(data = train_data, target = "target")
testtask = makeClassifTask(data = val_data, target = "target")
traintask = createDummyFeatures(obj = traintask)
testtask = createDummyFeatures(obj = testtask)
lrn = makeLearner("classif.xgboost",predict.type = "prob")
lrn$par.vals = list(objective = "binary:logistic", eval_metric = "error")
params = makeParamSet(makeDiscreteParam("booster",
values = c("gbtree","gblinear")),
makeIntegerParam("max_depth", lower = 3L, upper = 10L),
makeIntegerParam("nrounds", lower = 5L, upper = 30L),
makeNumericParam("min_child_weight", lower = 1L, upper = 10L),
makeNumericParam("subsample", lower = 0.5, upper = 1),
makeNumericParam("colsample_bytree", lower = 0.5, upper = 1),
makeNumericParam("gamma",lower = 0, upper = 2),
makeNumericParam("eta", lower = 0.1, upper = 3))
rdesc = makeResampleDesc("CV", stratify = T, iters = 5L)
ctrl = makeTuneControlRandom(maxit = 100L)
#ctrl = makeTuneControlGrid(resolution = c(max_depth = 10, nrounds = 10, min_child_weight = 50,
#                                          subsample = 50, colsample_bytree = 50, gamma = 50,
#                                          eta = 50), tune.threshold = FALSE)
parallelStartSocket(cpus=detectCores())
set.seed(121)
mytune = tuneParams(learner = lrn, task = traintask, resampling = rdesc,
measures = acc, par.set = params, control = ctrl,
show.info = F)
lrn_tune = setHyperPars(lrn, par.vals = mytune$x)
set.seed(11)
xgmodel = train(learner = lrn_tune, task = traintask)
xgpred = predict(xgmodel,testtask)
acc_xgboost = confusionMatrix(xgpred$data$response,xgpred$data$truth)$overall[1]
er_xgboost = mean(xgpred$data$response != xgpred$data$truth)
auc = generateThreshVsPerfData(xgpred, measures = list(fpr, tpr, mmce))
plotROCCurves(auc)
auc_xgboost = mlr::performance(xgpred, mlr::auc)
acc_xgboost
